#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.10
# In conjunction with Tcl version 8.6
#    Mar 06, 2018 03:50:53 PM
import sys

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

import uArmContralFrm_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    uArmContralFrm_support.set_Tk_var()
    top = uArm_Contral (root)
    uArmContralFrm_support.init(root, top)
    root.mainloop()

w = None
def create_uArm_Contral(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    uArmContralFrm_support.set_Tk_var()
    top = uArm_Contral (w)
    uArmContralFrm_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_uArm_Contral():
    global w
    w.destroy()
    w = None


class uArm_Contral(object):
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("500x892+739+3")
        top.title("uArm Contral")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")



        self.menubar = Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.menubar.add_command(
                activebackground="#d8d8d8",
                activeforeground="#000000",
                background="#d9d9d9",
                command=uArmContralFrm_support.setup_input_dialog,
                font="TkMenuFont",
                foreground="#000000",
                label="Setup")
        self.menubar.add_command(
                activebackground="#d8d8d8",
                activeforeground="#000000",
                background="#d9d9d9",
                command=uArmContralFrm_support.about_dialog,
                font="TkMenuFont",
                foreground="#000000",
                label="about")


        self.TFm_top = ttk.Frame(top)
        self.TFm_top.place(relx=0.0, rely=0.0, relheight=0.1, relwidth=1.0)
        self.TFm_top.configure(relief=GROOVE)
        self.TFm_top.configure(borderwidth="1")
        self.TFm_top.configure(relief=GROOVE)
        self.TFm_top.configure(width=500)
        self.TFm_top.configure(takefocus="0")

        self.TFm_set = ttk.Frame(self.TFm_top)
        self.TFm_set.place(relx=0.0, rely=0.04, relheight=0.89, relwidth=0.88)
        self.TFm_set.configure(relief=GROOVE)
        self.TFm_set.configure(borderwidth="1")
        self.TFm_set.configure(relief=GROOVE)
        self.TFm_set.configure(width=440)
        self.TFm_set.configure(takefocus="0")

        self.TCbox_shake_angle = ttk.Combobox(self.TFm_set)
        self.TCbox_shake_angle.place(relx=0.01, rely=0.53, relheight=0.32
                , relwidth=0.23)
        self.value_list = [10,20,30,40,50,]
        self.TCbox_shake_angle.configure(values=self.value_list)
        self.TCbox_shake_angle.configure(textvariable=uArmContralFrm_support.TCbbox_push)
        # uArmContralFrm_support.TCbox_shake_angle
        self.TCbox_shake_angle.configure(width=100)
        self.TCbox_shake_angle.configure(takefocus="")

        self.TCbbox_push = ttk.Combobox(self.TFm_set)
        self.TCbbox_push.place(relx=0.48, rely=0.13, relheight=0.32
                , relwidth=0.13)
        self.value_list = [350,250,]
        self.TCbbox_push.configure(values=self.value_list)
        self.TCbbox_push.configure(textvariable=uArmContralFrm_support.TCbbox_push)
        self.TCbbox_push.configure(width=5)
        self.TCbbox_push.configure(takefocus="")

        self.TCbox_pull = ttk.Combobox(self.TFm_set)
        self.TCbox_pull.place(relx=0.44, rely=0.53, relheight=0.32
                , relwidth=0.15)
        self.value_list = [150,200,]
        self.TCbox_pull.configure(values=self.value_list)
        self.TCbox_pull.configure(textvariable=uArmContralFrm_support.TCbox_pull)
        self.TCbox_pull.configure(width=68)
        self.TCbox_pull.configure(takefocus="")

        self.TCbox_up = ttk.Combobox(self.TFm_set)
        self.TCbox_up.place(relx=0.84, rely=0.13, relheight=0.32, relwidth=0.13)
        self.value_list = [150,170,]
        self.TCbox_up.configure(values=self.value_list)
        self.TCbox_up.configure(textvariable=uArmContralFrm_support.TCbox_up)
        self.TCbox_up.configure(width=5)
        self.TCbox_up.configure(takefocus="")

        self.TCbox_down = ttk.Combobox(self.TFm_set)
        self.TCbox_down.place(relx=0.84, rely=0.53, relheight=0.32
                , relwidth=0.13)
        self.value_list = [40,50,60,]
        self.TCbox_down.configure(values=self.value_list)
        self.TCbox_down.configure(textvariable=uArmContralFrm_support.TCbox_down)
        self.TCbox_down.configure(width=5)
        self.TCbox_down.configure(takefocus="")

        self.TLabel1 = ttk.Label(self.TFm_set)
        self.TLabel1.place(relx=0.02, rely=0.13, height=21, width=121)
        self.TLabel1.configure(background="#d9d9d9")
        self.TLabel1.configure(foreground="#000000")
        self.TLabel1.configure(relief=FLAT)
        self.TLabel1.configure(takefocus="0")
        self.TLabel1.configure(text='''Set shake angle :''')

        self.TLabel2 = ttk.Label(self.TFm_set)
        self.TLabel2.place(relx=0.26, rely=0.13, height=21, width=89)
        self.TLabel2.configure(background="#d9d9d9")
        self.TLabel2.configure(foreground="#000000")
        self.TLabel2.configure(relief=FLAT)
        self.TLabel2.configure(takefocus="0")
        self.TLabel2.configure(text='''Push Distance:''')

        self.TLabel3 = ttk.Label(self.TFm_set)
        self.TLabel3.place(relx=0.27, rely=0.53, height=21, width=79)
        self.TLabel3.configure(background="#d9d9d9")
        self.TLabel3.configure(foreground="#000000")
        self.TLabel3.configure(relief=FLAT)
        self.TLabel3.configure(takefocus="0")
        self.TLabel3.configure(text='''Pull Distance:''')

        self.TLabel4 = ttk.Label(self.TFm_set)
        self.TLabel4.place(relx=0.63, rely=0.13, height=21, width=79)
        self.TLabel4.configure(background="#d9d9d9")
        self.TLabel4.configure(foreground="#000000")
        self.TLabel4.configure(relief=FLAT)
        self.TLabel4.configure(takefocus="0")
        self.TLabel4.configure(text='''Up Distance:''')

        self.TLabel5 = ttk.Label(self.TFm_set)
        self.TLabel5.place(relx=0.61, rely=0.53, height=21, width=99)
        self.TLabel5.configure(background="#d9d9d9")
        self.TLabel5.configure(foreground="#000000")
        self.TLabel5.configure(relief=FLAT)
        self.TLabel5.configure(takefocus="0")
        self.TLabel5.configure(text='''Down Distance:''')

        self.TB_edit = ttk.Button(self.TFm_top)
        self.TB_edit.place(relx=0.89, rely=0.07, height=70, width=50)
        self.TB_edit.configure(takefocus="")
        self.TB_edit.configure(text='''Edit''')
        self.TB_edit.configure(width=50)
        self.TB_edit.bind('<Button-1>',uArmContralFrm_support.TB_edit_key)

        self.TFm_contral = ttk.Frame(top)
        self.TFm_contral.place(relx=0.0, rely=0.39, relheight=0.56, relwidth=1.0)

        self.TFm_contral.configure(relief=GROOVE)
        self.TFm_contral.configure(borderwidth="1")
        self.TFm_contral.configure(relief=GROOVE)
        self.TFm_contral.configure(width=500)
        self.TFm_contral.configure(takefocus="0")

        self.TB_push = ttk.Button(self.TFm_contral)
        self.TB_push.place(relx=0.52, rely=0.22, height=100, width=100)
        self.TB_push.configure(takefocus="")
        self.TB_push.configure(text='''Push''')
        self.TB_push.bind('<Button-1>',uArmContralFrm_support.TB_push_key)

        self.TB_reset = ttk.Button(self.TFm_contral)
        self.TB_reset.place(relx=0.52, rely=0.43, height=100, width=100)
        self.TB_reset.configure(takefocus="")
        self.TB_reset.configure(text='''Reset''')
        self.TB_reset.bind('<Button-1>',uArmContralFrm_support.TB_reset_key)

        self.TB_pull = ttk.Button(self.TFm_contral)
        self.TB_pull.place(relx=0.52, rely=0.64, height=100, width=100)
        self.TB_pull.configure(takefocus="")
        self.TB_pull.configure(text='''Pull''')
        self.TB_pull.bind('<Button-1>',uArmContralFrm_support.TB_pull_key)

        self.TB_shake_left = ttk.Button(self.TFm_contral)
        self.TB_shake_left.place(relx=0.31, rely=0.43, height=100, width=100)
        self.TB_shake_left.configure(takefocus="")
        self.TB_shake_left.configure(text='''Shake Left''')
        self.TB_shake_left.bind('<Button-1>',uArmContralFrm_support.TB_shake_left_key)

        self.TB_shake_right = ttk.Button(self.TFm_contral)
        self.TB_shake_right.place(relx=0.73, rely=0.43, height=100, width=100)
        self.TB_shake_right.configure(takefocus="")
        self.TB_shake_right.configure(text='''Shake Right''')
        self.TB_shake_right.bind('<Button-1>',uArmContralFrm_support.TB_shake_right)

        self.TB_up = ttk.Button(self.TFm_contral)
        self.TB_up.place(relx=0.02, rely=0.18, height=160, width=100)
        self.TB_up.configure(takefocus="")
        self.TB_up.configure(text='''Up''')
        self.TB_up.bind('<Button-1>',uArmContralFrm_support.TB_up_key)

        self.TB_down = ttk.Button(self.TFm_contral)
        self.TB_down.place(relx=0.02, rely=0.52, height=160, width=100)
        self.TB_down.configure(takefocus="")
        self.TB_down.configure(text='''Down''')
        self.TB_down.bind('<Button-1>',uArmContralFrm_support.TB_down_key)

        self.TB_look_left = ttk.Button(self.TFm_contral)
        self.TB_look_left.place(relx=0.22, rely=0.86, height=50, width=120)
        self.TB_look_left.configure(takefocus="")
        self.TB_look_left.configure(text='''Look Left''')
        self.TB_look_left.bind('<Button-1>',uArmContralFrm_support.TB_look_left)

        self.TB_look_center = ttk.Button(self.TFm_contral)
        self.TB_look_center.place(relx=0.47, rely=0.86, height=50, width=120)
        self.TB_look_center.configure(takefocus="")
        self.TB_look_center.configure(text='''Look Center''')
        self.TB_look_center.bind('<Button-1>',uArmContralFrm_support.TB_look_center)

        self.TFm_funkey = ttk.Frame(self.TFm_contral)
        self.TFm_funkey.place(relx=0.02, rely=0.02, relheight=0.15
                , relwidth=0.97)
        self.TFm_funkey.configure(relief=GROOVE)
        self.TFm_funkey.configure(borderwidth="2")
        self.TFm_funkey.configure(relief=GROOVE)
        self.TFm_funkey.configure(width=485)

        self.TB_f1 = ttk.Button(self.TFm_funkey)
        self.TB_f1.place(relx=0.02, rely=0.11, height=60, width=90)
        self.TB_f1.configure(takefocus="")
        self.TB_f1.configure(text='''F 1''')
        self.TB_f1.bind('<Button-1>',uArmContralFrm_support.TB_f1_key)

        self.TB_f2 = ttk.Button(self.TFm_funkey)
        self.TB_f2.place(relx=0.21, rely=0.11, height=60, width=90)
        self.TB_f2.configure(takefocus="")
        self.TB_f2.configure(text='''F 2''')
        self.TB_f2.bind('<Button-1>',uArmContralFrm_support.TB_f2_key)

        self.TB_f3 = ttk.Button(self.TFm_funkey)
        self.TB_f3.place(relx=0.4, rely=0.11, height=60, width=90)
        self.TB_f3.configure(takefocus="")
        self.TB_f3.configure(text='''F 3''')
        self.TB_f3.bind('<Button-1>',uArmContralFrm_support.TB_f3_key)

        self.TB_f4 = ttk.Button(self.TFm_funkey)
        self.TB_f4.place(relx=0.6, rely=0.11, height=60, width=90)
        self.TB_f4.configure(takefocus="")
        self.TB_f4.configure(text='''F 4''')
        self.TB_f4.bind('<Button-1>',uArmContralFrm_support.TB_f4_key)

        self.TB_f5 = ttk.Button(self.TFm_funkey)
        self.TB_f5.place(relx=0.79, rely=0.11, height=60, width=90)
        self.TB_f5.configure(takefocus="")
        self.TB_f5.configure(text='''F 5''')
        self.TB_f5.bind('<Button-1>',uArmContralFrm_support.TB_f5_key)

        self.TB_look_right = ttk.Button(self.TFm_contral)
        self.TB_look_right.place(relx=0.72, rely=0.86, height=50, width=120)
        self.TB_look_right.configure(takefocus="")
        self.TB_look_right.configure(text='''Look Right''')
        self.TB_look_right.bind('<Button-1>',uArmContralFrm_support.TB_look_right)

        self.TFm_state = ttk.Frame(top)
        self.TFm_state.place(relx=0.0, rely=0.94, relheight=0.05, relwidth=1.01)
        self.TFm_state.configure(relief=GROOVE)
        self.TFm_state.configure(borderwidth="1")
        self.TFm_state.configure(relief=GROOVE)
        self.TFm_state.configure(width=505)
        self.TFm_state.configure(takefocus="0")

        self.TLabel_state = ttk.Label(self.TFm_state)
        self.TLabel_state.place(relx=0.02, rely=0.04, height=21, width=459)
        self.TLabel_state.configure(background="#d9d9d9")
        self.TLabel_state.configure(foreground="#000000")
        self.TLabel_state.configure(relief=FLAT)
        self.TLabel_state.configure(text='''Tlabel''')

        self.TFm_msg = ttk.Frame(top)
        self.TFm_msg.place(relx=0.0, rely=0.09, relheight=0.3, relwidth=1.0)
        self.TFm_msg.configure(relief=GROOVE)
        self.TFm_msg.configure(borderwidth="1")
        self.TFm_msg.configure(relief=GROOVE)
        self.TFm_msg.configure(width=505)
        self.TFm_msg.configure(takefocus="0")

        self.Scrolledtext_msg = ScrolledText(self.TFm_msg)
        self.Scrolledtext_msg.place(relx=0.0, rely=0.04, relheight=0.96
                , relwidth=0.98)
        self.Scrolledtext_msg.configure(background="white")
        self.Scrolledtext_msg.configure(font="TkTextFont")
        self.Scrolledtext_msg.configure(foreground="black")
        self.Scrolledtext_msg.configure(highlightbackground="#d9d9d9")
        self.Scrolledtext_msg.configure(highlightcolor="black")
        self.Scrolledtext_msg.configure(insertbackground="black")
        self.Scrolledtext_msg.configure(insertborderwidth="3")
        self.Scrolledtext_msg.configure(selectbackground="#c4c4c4")
        self.Scrolledtext_msg.configure(selectforeground="black")
        self.Scrolledtext_msg.configure(takefocus="0")
        self.Scrolledtext_msg.configure(width=10)
        self.Scrolledtext_msg.configure(wrap=NONE)
        self.Scrolledtext_msg.insert("end" , "初始信息！\n初始信息！\n初始信息！\n初始信息！\n初始信息！\n初始信息！\n初始信息！\n初始信息！\n初始信息！\n初始信息！\n初始信息！\n初始信息！\n初始信息！\n初始信息！\n初始信息！\n初始信息！\n初始信息！\n初始信息！\n初始信息！\n初始信息！\n初始信息！\n初始信息！\n初始信息！\n初始信息！\n初始信息！\n初始信息！\n初始信息！\n初始信息！\n初始信息！\n初始信息！\n初始信息！\n初始信息！\n")





# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = Pack.__dict__.keys() | Grid.__dict__.keys() \
                  | Place.__dict__.keys()
        else:
            methods = Pack.__dict__.keys() + Grid.__dict__.keys() \
                  + Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        return func(cls, container, **kw)
    return wrapped

class ScrolledText(AutoScroll, Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

if __name__ == '__main__':
    vp_start_gui()



